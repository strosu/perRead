MVP

P0 scenarios:
User:
- register
- log in
- allow subscribing to an author; needs feed to author mappings too

P1 scenarios:
- search by titles
- search by author

TODO NEXT:
- return the ID as comment and create URL on the frontend to link to the respective item
- transfer from customer to company account, and from company account to all the other authors; needs a persisted ID to track the transaction from one end to the other; maybe make the transactionService's lifecycle to be the request?
- personal user profile, e.g. take me to my profile page
- add rating to articles
- have articles set as draft when created, with an option later on to publish them
- UI for editing an article, associating it with a section / - allow editing an article

TODO Pledges:
- see all pledges under user profile - DONE, needs categories (created, in progress, done etc.)

TODO Requests:
- private requests: either a single pledge for a request, request hidden and resulting in a private article 
    - alternatively, mechanism for sharing a private request (via a key?)

TODO Transactions:
N/A

MISC:
- new associate article with request component; have a dropdown of the article candidates
- pagination for all lists: articles, authors, tags, requests, pledges, transactions
- component for presenting an article in the list of read articles
    - for read articles, show something clickable. Display more information, e.g. acquire date
- component for editing a feed's properties, authors etc
    - component for presenting an author in the list of authors included in a feed

- show subscribed authors (authors for which at least one section is subscribed). Do we need a section preview? Might look better as cards vs tabs
- user/author preferences:
    - allow uploading an profile image
    - use initials or similar in case no picture provided
    - display image, description etc in author page
- on empty feed, add button to redirect to browse all authors
- add confirmation dialog when the price can be paid but is higher than the threshold; 
- do not allow navigating to unaffordable articles

TODO Sections:
N/A

TODO BACKEND:

- REFRESH TOKEN mechanism
- Add User managemenent
    - (DONE) show unlocked articles; for privacy reasons, maybe don't store the list? need an alrorithm that would hash and see if an article is already unlocked (similar to password checking)
        - alternatively, keep true to the name and don't store anything. Ask for tokens on every single read, since the probability of rereading an article is small.
        - offer both versions when the user registers? easier to not store anything at start, since storing them securely is more work (TBD)
        - offer 2 buttons near the article: Read vs Read and Remember(?)
            - for read, deduct the token and add to author
            - for read and remember, same as above, but also store in the user's history

- include the profile picture in the author preview
- are authors and users mapped 1 to 1? Does the author table become the users table? For some objects, yes. Where do we store the settings?
    - additional settings: show different colors (prices)? Maybe user wants a feed with just free articles. Have a toggle in the feed settings
    - settings page for the feeds, with options to edit each of them
    - have a new feed option in the user settings, as it's not something they want to do too often (or by accident, i.e. the plus as a new tab)
    - history page, allow deleting one by one
    - overlay text over the price label, e.g. FREE, UNAFFORDABLE, etc
    - add button the author list on empty feeds

- revisit tags, safety around parallel requests;
- do some basic search for titles
    - do more advanced search for article contents? grep maybe (if storing them as files)?

- return proper exception when login failed
- add pagination to GetAll methods

- decide storage algorithm for files; use userName as root? a deeper tree might be better than a shallower one;
- add new controller for getting the images, so they don't live under wwwroot (decouple from the server)

- PERF: get tag with top 50 articles, instead of all; same applies to author with articles
- PERF: consider singleQuery when getting tags -> articles -> authors

- make image an optional part of the request; if not sent, use the author's profile pic 
- when filtering by tag, return all tags as part of the articlePreview; this fixes articles with multiple tags
    
TODO FRONTEND:

Bugs:
- figure out why cliking on a tag in an article preview takes me to the article itself; see http://localhost:4200/tags/14 - bad routing
- somehow wrap titles with long words in the article preview

- unlock article UI
- do not load article if not enough money; show modal with the error in case of bad requests?
- refactor event bring raised from article-details instead of the service (somehow, maybe via maps. see comments). Alternatively, return a tuple of article, userData, although both messy
- add event for token change to all other places where a user can spend tokens (so many of them lol)

- add home page
- present all authors nicely
- user page
- display the login error properly
- REFRESH TOKENS, integrate into interceptor

Image upload for new articles:
- restrict max image size when uploading
- restrict button to the right on the new article form
- extract image upload form to separate component, need to use it for authors as well



DONE:
- present all articles nicely - SOMEWHAT
- fix concurrency issue when submitting new article and redirecting quickly via Link - see if Angular has the same problem (prob not, wait for request to finish)
- sign up - needs redirecting to login page - DONE (redirects to main page, might as well login the user if they gave us the credentials. Nicer UX since they don't need to confirm anything)
- sign in - needs redirecting to last visited page - DONE
- make intercepter look at 401s all the time and redirect to login with current page as an argument - DONE
- UI for subscribing to a section from a feed - DONE
- UI for editing sections: adding more, editing existing - DONE
- component for "buying" tokens - DONE
- component for adding a section to one of multiple feeds - DONE
- show all authors - DONE

- browse all articles - DONE
- browse all authors - DONE
- allow subscribing to a section - DONE
- have the feed populated with articles by the subscribed authors - DONE
- articles read are saved in the user profile - DONE
- input form for creating new article
    - add rest of fields
    - add image upload for each article
    - send image as part of the request
    - redirect to list of articles; alternatively, redirect to list of articles for current user (might be better)
- rework article presentation "page"
- proper implementation for many to many - DONE
- stop returning redirects to stuff that doesn't exist lol (register, login) - DONE
- create new user - DONE
- authenticate as user - DONE
- restrict access; play with roles, i.e. don't allow any user to create new articles - DONE
- add tags controller, operations on it (atm only getOne)
- endpoint for uploading images; can the image be combined with the main article post request? Seems so, via form?
- add reading tokens to the current user (requires signing in) - DONE
    - page with "prices" and token amounts
- new table for user history, preferences etc
- add reading tokens (under Account) - DONE
- custom error for not found, translate to 404 instead of 500 - DONE
- allow finishing a request and associating it with a new article (during article creation maybe) - DONE
- add Requests concept; map them to authors, allow users to create new ones and pledge to existing ones - DONE
- add list of sections when creating an article, require at least one - DONE

Author:
- Buy credits - DONE
- reading an article transfers the correct amount of credits from the reader to the author - DONE
- withdraw credits - DONE
- create an article including images - DONE

Pledges:
- view pledge details - DONE
- allow editing your pledges - DONE
- allow deleting a pledge (and implicitly a request, when no pledges are left) - DONE

TODO Transactions:
- each token move needs to be logged; users needs to be able to see their list of transactions - DONE

Requests:
- allow editing a request, only if you're the only pledger - DONE
- allow accepting a request - DONE
- properly set the type of request - DONE
- use the type of request later on (concept of exclusives, profit sharing) - needs to profit share only when set to; for exclusives, needs a flag in the article itself to remove from the list if current user is not an owner already - DONE